@startuml
skinparam componentStyle uml2

title Event Collection - component interaction

together {
  package "data initializer" {
    component "Data Initializer" as dataInit
    component "Aerospike Node client" as asNodeInit
    dataInit -r(0- asNodeInit
  }

  package "Simulator" {
    component "publisher-simulator" as simulator
    component "Aerospike Node client" as asNodeSim
    simulator -r(0- asNodeSim
  }
}

package "Event Collector" {
    () "4000" as ecSocket
    component "Event Collector" as eventEUuk
    ecSocket - eventEUuk
    component "Aerospike Node client" as asNodeCollector
    eventEUuk -r(0- asNodeCollector
}

package "Edge Aerospike" {
    () "3010" as aseSocket
    component "Aerospike\nEnterprise\nEdition\n\nin AP mode" as asEdge
    aseSocket - asEdge
    database "Event Datastore\nAerospike AP" as edgeEUuk #LightPink
    asEdge -r(0- edgeEUuk
    
    () "8080" as asOutbound
    component [Aerospike\nOutbound Kafka\nConnector] as asKafka
    asOutbound - asKafka
    asEdge ..> asOutbound: HTTP(s)
}

package "Core Aerospike" {
    () "3000" as ascSocket
    component "Aerospike\nEnterprise\nEdition\n\nin CP mode" as asCore
    ascSocket - asCore
    database "Campaign Datastore\nAerospike CP" as core #LightPink
    asCore -r(0- core
}

package "Kafka and Zookeeper" {
    component [Kafka\nCli] as kafCli
    () "9092" as kafClient
    component [Kafka\nCluster] as kafCluster
    kafClient - kafCluster

    component [Zoo\nKeeper] as zookeeper
}

asNodeInit ..> ascSocket: TCP\nbinary\nprotocol
asNodeSim <.. ascSocket: TCP\nbinary\nprotocol
asNodeCollector <..> aseSocket: TCP\nbinary\nprotocol
asKafka .r.> kafClient: TCP\nbinary\nprotocol
zookeeper <..> kafCluster
simulator ..> ecSocket
kafCli <.. kafClient: TCP\nbinary\nprotocol



@enduml